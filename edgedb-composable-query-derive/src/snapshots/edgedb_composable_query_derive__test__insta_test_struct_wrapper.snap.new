---
source: edgedb-composable-query-derive/src/lib.rs
assertion_line: 175
expression: formatted
---
impl ::edgedb_composable_query::ComposableQuerySelector for InnerById {
    const RESULT_TYPE: ::edgedb_composable_query::ComposableQueryResultType = ::edgedb_composable_query::ComposableQueryResultType::Field;
    fn format_selector(fmt: &mut impl ::std::fmt::Write) -> Result<(), std::fmt::Error> {
        use ::edgedb_composable_query::itertools::Itertools;
        <Inner as ::edgedb_composable_query::ComposableQuerySelector>::format_selector(
            fmt,
        )?;
        Ok(())
    }
}
impl ::edgedb_composable_query::ComposableQuery for InnerById {
    const ARG_NAMES: &'static [&'static str] = &["id"];
    type ARG_TYPES = (Uuid);
    type RETURN_TYPE = Self;
    fn format_query(
        fmt: &mut impl ::std::fmt::Write,
        args: &::std::collections::HashMap<&str, String>,
    ) -> Result<(), ::std::fmt::Error> {
        use ::edgedb_composable_query::itertools::Itertools;
        use ::edgedb_composable_query::ComposableQuerySelector;
        fmt.write_str("with\n")?;
        fmt.write_fmt(
            format_args!(
                "\t{} := <{}>{},\n", "id", < Uuid as
                ::edgedb_composable_query::AsEdgedbVar > ::EDGEDB_TYPE, args["id"]
            ),
        )?;
        fmt.write_fmt(
            format_args!(
                "\t{} := ({}),\n", "_selector", "select Inner filter .id = id limit 1"
            ),
        )?;
        fmt.write_str(&format!("({})", "_selector"))?;
        Self::format_selector(fmt)?;
        Ok(())
    }
}

