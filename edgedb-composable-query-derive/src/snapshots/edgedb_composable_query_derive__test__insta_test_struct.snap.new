---
source: edgedb-composable-query-derive/src/lib.rs
assertion_line: 151
expression: formatted
---
impl ::edgedb_composable_query::ComposableQuery for InsertQ {
    const ARG_NAMES: &'static [&'static str] = &["n", "v"];
    fn format_query(
        fmt: &mut impl ::std::fmt::Write,
        args: &::std::collections::HashMap<&str, String>,
    ) -> Result<(), ::std::fmt::Error> {
        fmt.write_str("with\n")?;
        fmt.write_fmt(
            format_args!(
                "\t{} := <{}>{},\n", "n", < i32 as ::edgedb_composable_query::AsEdgedbVar
                > ::EDGEDB_TYPE, args["n"]
            ),
        )?;
        fmt.write_fmt(
            format_args!(
                "\t{} := <{}>{},\n", "v", < String as
                ::edgedb_composable_query::AsEdgedbVar > ::EDGEDB_TYPE, args["v"]
            ),
        )?;
        fmt.write_fmt(
            format_args!(
                "\t{} := ({}),\n", "q", { let args = [("v", "v"), ("n", "a + 1")]; <
                crate ::InsertQ2 as ::edgedb_composable_query::ComposableQuery >
                ::format_query(& mut ::std::fmt::Write::new(), & args) ? }
            ),
        )?;
        fmt.write_fmt(
            format_args!(
                "select {{\n{}\n}}", [("id", "id"), ("calc", "calc"), ("by_name",
                "by_name")].iter().map(| (k, v) | format!("\t{k} := ({v}),")).join("\n")
            ),
        )?;
        Ok(())
    }
}

