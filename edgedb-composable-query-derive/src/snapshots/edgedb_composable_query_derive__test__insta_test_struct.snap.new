---
source: edgedb-composable-query-derive/src/lib.rs
assertion_line: 144
expression: formatted
---
impl ::edgedb_composable_query::ComposableQuery for InsertQ {
    const ARG_NAMES: &'static [&'static str] = &["n", "v"];
    fn format_query(
        fmt: &mut impl ::std::fmt::Write,
        args: &::std::collections::HashMap<&str, String>,
    ) -> Result<(), ::std::fmt::Error> {
        use ::edgedb_composable_query::itertools::Itertools;
        fmt.write_str("with\n")?;
        fmt.write_fmt(
            format_args!(
                "\t{} := <{}>{},\n", "n", < i32 as ::edgedb_composable_query::AsEdgedbVar
                > ::EDGEDB_TYPE, args["n"]
            ),
        )?;
        fmt.write_fmt(
            format_args!(
                "\t{} := <{}>{},\n", "v", < String as
                ::edgedb_composable_query::AsEdgedbVar > ::EDGEDB_TYPE, args["v"]
            ),
        )?;
        fmt.write_fmt(
            format_args!(
                "\t{} := ({}),\n", "q", { let args = [("v", format!("({})", "v")), ("n",
                format!("({})", "a + 1"))].into(); let mut buf = String::new(); < crate
                ::InsertQ2 as ::edgedb_composable_query::ComposableQuery >
                ::format_query(& mut buf, & args) ?;
                ::edgedb_composable_query::query_add_indent(& buf) }
            ),
        )?;
        fmt.write_fmt(
            format_args!("\t{} := ({}),\n", "_selector", "select Inner limit 1"),
        )?;
        fmt.write_fmt(
            format_args!("select {} {{\n\t{}\n}}", "_selector", "id", "calc", "by_name"),
        )?;
        Ok(())
    }
}

